app: data-storage 
service: data-storage

frameworkVersion: '3'

plugins:
  - serverless-plugin-typescript
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs14.x
  iam:
    deploymentRole: 'arn:aws:iam::104843235006:role/data-scraper-app-CloudFormationExecutionRole'

functions:
  writePlaysToDynamo:
    handler: src/handler.writePlaysToDynamo
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:PutItem
          - dynamodb:BatchWriteItem
        Resource: arn:aws:dynamodb:us-west-2:*:table/bts_play
  writeGameDetailToDynamo:
    handler: src/handler.writeGameDetailToDynamo
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:PutItem
          - dynamodb:BatchWriteItem
        Resource: arn:aws:dynamodb:us-west-2:*:table/bts_game_table

resources:
  Resources:
    playTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: bts_play
        AttributeDefinitions:
          - AttributeName: batter_id
            AttributeType: N
          - AttributeName: play_index
            AttributeType: S
        KeySchema:
          - AttributeName: batter_id
            KeyType: HASH
          - AttributeName: play_index
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
    gameDetailTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: bts_game_table
        AttributeDefinitions:
          - AttributeName: game_index
            AttributeType: S
        KeySchema:
          - AttributeName: game_index
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
